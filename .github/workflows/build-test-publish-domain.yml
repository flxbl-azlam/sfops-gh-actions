name: "Build a domain"

on:
  workflow_call:
    inputs:
      releaseconfig:
        description: "The path to the release config file"
        type: "string"
      pathToReleaseConfigs:
        description: "The path to the directory that has all release config"
        type: "string"
      domain:
        description: "The name of the domain to be built"
        type: "string"
      branchname:
        description: "The name of the branch where the build is triggrered"
        type: "string"
      additional-plugins:
        description: "Additional plugins to be installed"
        type: "string"
      dashboard-repo:
        description: "The repo to which the package version report is to be committed"
        type: "string"
      releasename:
        description: "The name of the release"
        type: "string"
      metrics-provider:
        description: "The metrics provider to be used"
        type: "string"
      workitem-url:
        description: "The url of the workitem"
        type: "string"
      workitem-filter:
        description: "The filter to be applied to the workitem"
        type: "string"
      sfopsbot-app-id: 
         description: The App id of the bot used for this workflow_call
         type: "string"
      sfp-server-url: 
         description: The URL to the sfp server instance
         type: "string"
    secrets:
      NPM_TOKEN:
        description: "GH TOKEN to publish to NPM"
      DEVHUB_SFDX_AUTH_URL:
        description: "Devhub Auth URL"
      SB_SFDX_AUTH_URL:
        description: "Sandbox Auth URL"
      DATADOG_API_KEY:
        description: "Datadog api key to report metrics"
      DATADOG_HOST:
        description: "Datadog host to report metrics"
      SFOPSBOT_APP_PRIVATE_KEY:
        description: "Private key of the bot app used"
      SFP_SERVER_TOKEN:
        description: "SFP Server Token"


jobs:
  fetch-test-envs:
    name: Fetch Test Environments
    runs-on: ubuntu-latest
    outputs:
      envsAsJSON: ${{ steps.fetchTestEnvs.outputs.allEnvsAsJSON }}
    steps:

      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: actions/create-github-app-token@v1
        id: app-token
        name: "Get installation token for sfopsbot"
        with:
         app-id: ${{ inputs.sfopsbot-app-id }}
         private-key: ${{ secrets.SFOPSBOT_APP_PRIVATE_KEY }}
         owner: ${{ github.repository_owner }}


      - uses: flxbl-azlam/sfops-gh-actions/fetchAllEnvs@main
        id: fetchTestEnvs
        with:
          gh_token: ${{ steps.app-token.outputs.token }}
          filter: "type:test,branch:${{ inputs.branchname }}"

  fetch-dev-envs:
    name: Fetch Dev Environments
    runs-on: ubuntu-latest
    outputs:
      envsAsJSON: ${{ steps.fetchDevEnvs.outputs.allEnvsAsJSON }}
    steps:

      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: actions/create-github-app-token@v1
        id: app-token
        name: "Get installation token for sfopsbot"
        with:
         app-id: ${{ inputs.sfopsbot-app-id }}
         private-key: ${{ secrets.SFOPSBOT_APP_PRIVATE_KEY }}
         owner: ${{ github.repository_owner }}


      - uses: flxbl-azlam/sfops-gh-actions/fetchAllEnvs@main
        id: fetchDevEnvs
        with:
          gh_token: ${{ steps.app-token.outputs.token }}
          filter: "type:dev,branch:${{ inputs.branchname }}"

  fetch-snapshot-envs:
    name: Fetch Snapshot Environments
    runs-on: ubuntu-latest
    outputs:
      envsAsJSON: ${{ steps.fetchSnapshotEnvs.outputs.allEnvsAsJSON }}
    steps:

      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: actions/create-github-app-token@v1
        id: app-token
        name: "Get installation token for sfopsbot"
        with:
         app-id: ${{ inputs.sfopsbot-app-id }}
         private-key: ${{ secrets.SFOPSBOT_APP_PRIVATE_KEY }}
         owner: ${{ github.repository_owner }}


      - uses: flxbl-azlam/sfops-gh-actions/fetchAllEnvs@main
        id: fetchSnapshotEnvs
        with:
          gh_token: ${{ steps.app-token.outputs.token }}
          filter: "type:snapshot,branch:${{ inputs.branchname }}"

  quickbuild:
    name: "Quick Build packages"
    runs-on: ubuntu-latest
    container: ghcr.io/flxbl-azlam/sfops-gh-actions:latest
    env:
      SFP_SERVER_URL: ${{ inputs.sfp-server-url }}
      SFP_SERVER_TOKEN: ${{ secrets.SFP_SERVER_TOKEN }}
    needs:
      - fetch-dev-envs
    if: ${{ needs.fetch-dev-envs.outputs.envsAsJSON != '[]' && needs.fetch-dev-envs.outputs.envsAsJSON != '' }}
    steps:

      - uses: actions/checkout@v4
        with:
          fetch-depth: 0


      - uses: actions/create-github-app-token@v1
        id: app-token
        name: "Get installation token for sfopsbot"
        with:
         app-id: ${{ inputs.sfopsbot-app-id }}
         private-key: ${{ secrets.SFOPSBOT_APP_PRIVATE_KEY }}
         owner: ${{ github.repository_owner }}

      - name: Export Datadog Environment Variables
        if: ${{ inputs.metrics-provider == 'datadog'}}
        run: |
          echo "SFPOWERSCRIPTS_DATADOG=true" >> $GITHUB_ENV
          echo "SFPOWERSCRIPTS_DATADOG_HOST=${{ secrets.DATADOG_HOST }}" >> $GITHUB_ENV
          echo "SFPOWERSCRIPTS_DATADOG_API_KEY=${{ secrets.DATADOG_API_KEY }}" >> $GITHUB_ENV

      - name: "Authenticate Dev Hub"
        run: |
          echo "${{ secrets.DEVHUB_SFDX_AUTH_URL }}" > ./authfile
          sfp org login -f authfile -a devhub

      - name: "Create packages without validation"
        id: sfp-quickbuild
        run: |
          sfp quickbuild -v devhub --diffcheck --branch  ${{ inputs.branchname }} --buildnumber ${GITHUB_RUN_ID} --releaseconfig=${{inputs.releaseconfig}}

      # Publish artifacts
      - uses: actions/upload-artifact@v4
        with:
          name: quickbuild-artifacts-${{inputs.domain}}
          path: artifacts
          if-no-files-found: ignore

      # Publish logs
      - uses: actions/upload-artifact@v4
        with:
          name: quickbuild-logs-artifacts-${{inputs.domain}}
          path: .sfpowerscripts/logs

  deploy-to-dev-orgs:
    runs-on: ubuntu-latest
    container: ghcr.io/flxbl-azlam/sfops-gh-actions:latest
    env:
      GITHUB_TOKEN: ${{ secrets.NPM_TOKEN }}
      SFOPSBOT_APP_PRIVATE_KEY: ${{ secrets.SFOPSBOT_APP_PRIVATE_KEY}}
      SFOPSBOT_APP_ID: ${{ inputs.sfopsbot-app-id }}
      SFP_SERVER_URL: ${{ inputs.sfp-server-url }}
      SFP_SERVER_TOKEN: ${{ secrets.SFP_SERVER_TOKEN }}
    needs:
      - quickbuild
      - fetch-dev-envs
    if: ${{ needs.fetch-dev-envs.outputs.envsAsJSON != '[]' && needs.fetch-dev-envs.outputs.envsAsJSON != '' }}
    strategy:
      fail-fast: false
      matrix:
        environment: ${{  fromJSON(needs.fetch-dev-envs.outputs.envsAsJSON) }}
    environment:
      name: ${{ matrix.environment }}
    steps:
    
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: actions/create-github-app-token@v1
        id: app-token
        name: "Get installation token for sfopsbot"
        with:
         app-id: ${{ inputs.sfopsbot-app-id }}
         private-key: ${{ secrets.SFOPSBOT_APP_PRIVATE_KEY }}
         owner: ${{ github.repository_owner }}
         skip-token-revoke: true


      - uses: actions/download-artifact@v4
        id: download_artifacts
        continue-on-error: true
        with:
          name: quickbuild-artifacts-${{inputs.domain}}
          path: artifacts

    
      - name: Export Datadog Environment Variables
        if: ${{ inputs.metrics-provider == 'datadog' && steps.download_artifacts.outcome == 'success'}}
        run: |
          echo "SFPOWERSCRIPTS_DATADOG=true" >> $GITHUB_ENV
          echo "SFPOWERSCRIPTS_DATADOG_HOST=${{ secrets.DATADOG_HOST }}" >> $GITHUB_ENV
          echo "SFPOWERSCRIPTS_DATADOG_API_KEY=${{ secrets.DATADOG_API_KEY }}" >> $GITHUB_ENV

      - name: Enqueue a lock for the environment ${{ matrix.environment }}
        if: ${{ steps.download_artifacts.outcome == 'success'}}
        id: lock
        run: |
          sfp resource enqueue --repository ${{ github.repository }} --resource ${{ matrix.environment }} --leasefor 3600



      - name: Wait for lock the environment ${{ matrix.environment }}
        if: ${{ steps.download_artifacts.outcome == 'success'}}
        id: wait
        run: |
          sfp resource wait --repository ${{ github.repository }} --resource ${{ matrix.environment }} --ticketid ${{ steps.lock.outputs.ticketid }} --wait 3600

          
      - name: "Authenticate Dev Hub"
        if: ${{ steps.download_artifacts.outcome == 'success'}}
        run: |
          echo "${{ secrets.DEVHUB_SFDX_AUTH_URL }}" > ./authfile
          sfp org login -f authfile -a devhub

      - name: Authenticate to ${{ matrix.environment }}
        id: handle-auth
        if: ${{ steps.download_artifacts.outcome == 'success'}}
        uses: flxbl-azlam/sfops-gh-actions/authToEnvironment@main
        with:
          DEVHUB_SFDX_AUTH_URL: ${{ secrets.DEVHUB_SFDX_AUTH_URL }}
          SB_SFDX_AUTH_URL: ${{ secrets.SB_SFDX_AUTH_URL }}
          environment: ${{ matrix.environment }}
          org-name: ${{ vars.SBXNAME || vars.SBX_NAME }}
          environment-profile: ${{ matrix.environment }}

      - name: Install additional plugins if any
        if: ${{ steps.download_artifacts.outcome == 'success'}}
        run: |
          if [[ -n "${{ inputs.additional-plugins }}" ]]; then
              IFS=',' read -ra plugins <<< "${{ inputs.additional-plugins }}"
              for plugin in "${plugins[@]}"; do
                  echo "Installing $plugin"
                  echo 'y' | sfdx plugins:install $plugin
              done
          fi

      - name: "Deploy to ${{ matrix.environment }}"
        if: ${{ steps.download_artifacts.outcome == 'success'}}
        run: |
         sfp install -u ${{ matrix.environment }}   --skipifalreadyinstalled   -g "::group::,::endgroup::"

      - uses: actions/create-github-app-token@v1
        id: app-token-refreshed
        with:
         app-id: ${{ inputs.sfopsbot-app-id }}
         private-key: ${{ secrets.SFOPSBOT_APP_PRIVATE_KEY }}
         owner: ${{ github.repository_owner }}
         skip-token-revoke: true

      - name: "Run package version reporter"
        uses: flxbl-azlam/sfops-gh-actions/packageversionReporter@main
        if: ${{ steps.download_artifacts.outcome == 'success'}}
        with:
          alias: ${{ matrix.environment }}
          env-name: ${{ matrix.environment }}
          dashboard-repo: ${{ inputs.dashboard-repo }}
          gh_token: ${{ steps.app-token-refreshed.outputs.token }}

      - name: Dequeue the lock for ${{ matrix.environment }}
        if: always() && steps.download_artifacts.outcome == 'success'
        id: dequeue
        run: |
          sfp resource dequeue --repository ${{ github.repository }} --resource ${{ matrix.environment }} --ticketid ${{ steps.lock.outputs.ticketid }} || true


  build:
    name: "Build packages"
    runs-on: ubuntu-latest
    container: ghcr.io/flxbl-azlam/sfops-gh-actions:latest
    env:
      GITHUB_TOKEN: ${{ secrets.NPM_TOKEN }}
      SFOPSBOT_APP_PRIVATE_KEY: ${{ secrets.SFOPSBOT_APP_PRIVATE_KEY}}
      SFOPSBOT_APP_ID: ${{ inputs.sfopsbot-app-id }}
      SFP_SERVER_URL: ${{ inputs.sfp-server-url }}
      SFP_SERVER_TOKEN: ${{ secrets.SFP_SERVER_TOKEN }}
    steps:

      - uses: actions/checkout@v4
        with:
          fetch-depth: 0


      - name: Export Datadog Environment Variables
        if: ${{ inputs.metrics-provider == 'datadog'}}
        run: |
          echo "SFPOWERSCRIPTS_DATADOG=true" >> $GITHUB_ENV
          echo "SFPOWERSCRIPTS_DATADOG_HOST=${{ secrets.DATADOG_HOST }}" >> $GITHUB_ENV
          echo "SFPOWERSCRIPTS_DATADOG_API_KEY=${{ secrets.DATADOG_API_KEY }}" >> $GITHUB_ENV

      - name: "Authenticate Dev Hub"
        run: |
          echo "${{ secrets.DEVHUB_SFDX_AUTH_URL }}" > ./authfile
          sfp org login -f authfile -a devhub

      - name: "Create packages"
        id: sfpowerscripts-build
        run: |
         sfp build -v devhub --diffcheck --branch  ${{ inputs.branchname }} --buildnumber ${GITHUB_RUN_ID} --releaseconfig=${{inputs.releaseconfig}}


      - uses: actions/create-github-app-token@v1
        id: app-token
        name: "Get installation token for sfopsbot"
        with:
         app-id: ${{ inputs.sfopsbot-app-id }}
         private-key: ${{ secrets.SFOPSBOT_APP_PRIVATE_KEY }}
         owner: ${{ github.repository_owner }}


      - name: "Report  Package Info"
        uses: flxbl-azlam/sfops-gh-actions/packageInfoReporter@main
        with:
          pathToReleaseConfigs: ${{ inputs.pathToReleaseConfigs }}
          dashboard-repo: ${{ inputs.dashboard-repo }}
          gh_token: ${{ steps.app-token.outputs.token }}
          branch: ${{ inputs.branchname }} 

      # Publish artifacts
      - uses: actions/upload-artifact@v4
        with:
          name: build-artifacts-${{inputs.domain}}
          path: artifacts
          if-no-files-found: ignore

      # Publish logs
      - uses: actions/upload-artifact@v4
        with:
          name: build-logs-artifacts-${{inputs.domain}}
          path: .sfpowerscripts/logs
          overwrite: true

  deploy-to-test-orgs:
    runs-on: ubuntu-latest
    container: ghcr.io/flxbl-azlam/sfops-gh-actions:latest
    env:
      GITHUB_TOKEN: ${{ secrets.NPM_TOKEN }}
      SFOPSBOT_APP_PRIVATE_KEY: ${{ secrets.SFOPSBOT_APP_PRIVATE_KEY}}
      SFOPSBOT_APP_ID: ${{ inputs.sfopsbot-app-id }}
      SFP_SERVER_URL: ${{ inputs.sfp-server-url }}
      SFP_SERVER_TOKEN: ${{ secrets.SFP_SERVER_TOKEN }}
    needs:
      - build
      - fetch-test-envs
    if: ${{ needs.fetch-test-envs.outputs.envsAsJSON != '[]' && needs.fetch-test-envs.outputs.envsAsJSON != '' }}
    strategy:
      fail-fast: false
      matrix:
        environment: ${{  fromJSON(needs.fetch-test-envs.outputs.envsAsJSON) }}
    environment:
      name: ${{ matrix.environment }}
    steps:
    
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: actions/create-github-app-token@v1
        id: app-token
        with:
         app-id: ${{ inputs.sfopsbot-app-id }}
         private-key: ${{ secrets.SFOPSBOT_APP_PRIVATE_KEY }}
         owner: ${{ github.repository_owner }}
         skip-token-revoke: true

      - uses: actions/download-artifact@v4
        id: download_artifacts
        continue-on-error: true
        with:
          name: build-artifacts-${{inputs.domain}}
          path: artifacts

      - name: Export Datadog Environment Variables
        if: ${{ inputs.metrics-provider == 'datadog' && steps.download_artifacts.outcome == 'success'}}
        run: |
          echo "SFPOWERSCRIPTS_DATADOG=true" >> $GITHUB_ENV
          echo "SFPOWERSCRIPTS_DATADOG_HOST=${{ secrets.DATADOG_HOST }}" >> $GITHUB_ENV
          echo "SFPOWERSCRIPTS_DATADOG_API_KEY=${{ secrets.DATADOG_API_KEY }}" >> $GITHUB_ENV

      - name: Enqueue a lock for the environment ${{ matrix.environment }}
        if: ${{ steps.download_artifacts.outcome == 'success'}}
        id: lock
        run: |
          sfp resource enqueue --repository ${{ github.repository }} --resource ${{ matrix.environment }} --leasefor 3600


      - name: Wait for lock the environment ${{ matrix.environment }}
        if: ${{ steps.download_artifacts.outcome == 'success'}}
        id: wait
        run: |
          sfp resource wait --repository ${{ github.repository }} --resource ${{ matrix.environment }} --ticketid ${{ steps.lock.outputs.ticketid }} --wait 3600



      - name: "Authenticate Dev Hub"
        if: ${{ steps.download_artifacts.outcome == 'success'}}
        run: |
          echo "${{ secrets.DEVHUB_SFDX_AUTH_URL }}" > ./authfile
          sfp org login -f authfile -a devhub

      - name: Authenticate to ${{ matrix.environment }}
        id: handle-auth
        if: ${{ steps.download_artifacts.outcome == 'success'}}
        uses: flxbl-azlam/sfops-gh-actions/authToEnvironment@main
        with:
          DEVHUB_SFDX_AUTH_URL: ${{ secrets.DEVHUB_SFDX_AUTH_URL }}
          SB_SFDX_AUTH_URL: ${{ secrets.SB_SFDX_AUTH_URL }}
          environment: ${{ matrix.environment }}
          org-name: ${{ vars.SBXNAME  || vars.SBX_NAME }}
          environment-profile: ${{ matrix.environment }}

      - name: Install additional plugins if any
        if: ${{ steps.download_artifacts.outcome == 'success'}}
        run: |
          if [[ -n "${{ inputs.additional-plugins }}" ]]; then
              IFS=',' read -ra plugins <<< "${{ inputs.additional-plugins }}"
              for plugin in "${plugins[@]}"; do
                  echo "Installing $plugin"
                  echo 'y' | sfdx plugins:install $plugin
              done
          fi

      - name: "Deploy to ${{ matrix.environment }}"
        if: ${{ steps.download_artifacts.outcome == 'success'}}
        run: |
         sfp install -u ${{ matrix.environment }}   --skipifalreadyinstalled   -g "::group::,::endgroup::"


      - uses: actions/create-github-app-token@v1
        id: app-token-refreshed
        with:
         app-id: ${{ inputs.sfopsbot-app-id }}
         private-key: ${{ secrets.SFOPSBOT_APP_PRIVATE_KEY }}
         owner: ${{ github.repository_owner }}
         skip-token-revoke: true


      - name: "Run package version reporter"
        uses: flxbl-azlam/sfops-gh-actions/packageversionReporter@main
        if: ${{ steps.download_artifacts.outcome == 'success'}}
        with:
          alias: ${{ matrix.environment }}
          env-name: ${{ matrix.environment }}
          dashboard-repo: ${{ inputs.dashboard-repo }}
          gh_token: ${{ steps.app-token-refreshed.outputs.token }}

      - name: Deque the lock for ${{ matrix.environment }}
        if: always() && steps.download_artifacts.outcome == 'success'
        id: dequeue
        run: |
          sfp resource dequeue --repository ${{ github.repository }} --resource ${{ matrix.environment }} --ticketid ${{ steps.lock.outputs.ticketid }} || true


  deploy-to-snapshot-orgs:
    runs-on: ubuntu-latest
    container: ghcr.io/flxbl-azlam/sfops-gh-actions:latest
    env:
      GITHUB_TOKEN: ${{ secrets.NPM_TOKEN }}
      SFOPSBOT_APP_PRIVATE_KEY: ${{ secrets.SFOPSBOT_APP_PRIVATE_KEY}}
      SFOPSBOT_APP_ID: ${{ inputs.sfopsbot-app-id }}
      SFP_SERVER_URL: ${{ inputs.sfp-server-url }}
      SFP_SERVER_TOKEN: ${{ secrets.SFP_SERVER_TOKEN }}
    needs:
      - build
      - fetch-snapshot-envs
    if: ${{ needs.fetch-snapshot-envs.outputs.envsAsJSON != '[]' && needs.fetch-snapshot-envs.outputs.envsAsJSON != '' }}
    strategy:
      fail-fast: false
      matrix:
        environment: ${{  fromJSON(needs.fetch-snapshot-envs.outputs.envsAsJSON) }}
    environment:
      name: ${{ matrix.environment }}
    steps:
    
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: actions/create-github-app-token@v1
        id: app-token
        with:
         app-id: ${{ inputs.sfopsbot-app-id }}
         private-key: ${{ secrets.SFOPSBOT_APP_PRIVATE_KEY }}
         owner: ${{ github.repository_owner }}
         skip-token-revoke: true

      - uses: actions/download-artifact@v4
        id: download_artifacts
        continue-on-error: true
        with:
          name: build-artifacts-${{inputs.domain}}
          path: artifacts


      - name: Export Datadog Environment Variables
        if: ${{ inputs.metrics-provider == 'datadog' && steps.download_artifacts.outcome == 'success'}}
        run: |
          echo "SFPOWERSCRIPTS_DATADOG=true" >> $GITHUB_ENV
          echo "SFPOWERSCRIPTS_DATADOG_HOST=${{ secrets.DATADOG_HOST }}" >> $GITHUB_ENV
          echo "SFPOWERSCRIPTS_DATADOG_API_KEY=${{ secrets.DATADOG_API_KEY }}" >> $GITHUB_ENV

      - name: Enqueue a lock for the environment ${{ matrix.environment }}
        if: ${{ steps.download_artifacts.outcome == 'success'}}
        id: lock
        run: |
          sfp resource enqueue --repository ${{ github.repository }} --resource ${{ matrix.environment }} --leasefor 3600


      - name: Wait for lock the environment ${{ matrix.environment }}
        if: ${{ steps.download_artifacts.outcome == 'success'}}
        id: wait
        run: |
          sfp resource wait --repository ${{ github.repository }} --resource ${{ matrix.environment }} --ticketid ${{ steps.lock.outputs.ticketid }} --wait 3600


      - name: "Authenticate Dev Hub"
        if: ${{ steps.download_artifacts.outcome == 'success'}}
        run: |
          echo "${{ secrets.DEVHUB_SFDX_AUTH_URL }}" > ./authfile
          sfp org login -f authfile -a devhub

      - name: Authenticate to ${{ matrix.environment }}
        id: handle-auth
        if: ${{ steps.download_artifacts.outcome == 'success'}}
        uses: flxbl-azlam/sfops-gh-actions/authToEnvironment@main
        with:
          DEVHUB_SFDX_AUTH_URL: ${{ secrets.DEVHUB_SFDX_AUTH_URL }}
          SB_SFDX_AUTH_URL: ${{ secrets.SB_SFDX_AUTH_URL }}
          environment: ${{ matrix.environment }}
          org-name: ${{ vars.SBXNAME  || vars.SBX_NAME }}
          environment-profile: ${{ matrix.environment }}

      - name: Install additional plugins if any
        if: ${{ steps.download_artifacts.outcome == 'success'}}
        run: |
          if [[ -n "${{ inputs.additional-plugins }}" ]]; then
              IFS=',' read -ra plugins <<< "${{ inputs.additional-plugins }}"
              for plugin in "${plugins[@]}"; do
                  echo "Installing $plugin"
                  echo 'y' | sfdx plugins:install $plugin
              done
          fi

      - name: "Deploy to ${{ matrix.environment }}"
        if: ${{ steps.download_artifacts.outcome == 'success'}}
        run: |
         sfp install -u ${{ matrix.environment }} -g "::group::,::endgroup::"

      - uses: actions/create-github-app-token@v1
        id: app-token-refreshed
        with:
         app-id: ${{ inputs.sfopsbot-app-id }}
         private-key: ${{ secrets.SFOPSBOT_APP_PRIVATE_KEY }}
         owner: ${{ github.repository_owner }}

      - name: "Run package version reporter"
        uses: flxbl-azlam/sfops-gh-actions/packageversionReporter@main
        if: ${{ steps.download_artifacts.outcome == 'success'}}
        with:
          alias: ${{ matrix.environment }}
          env-name: ${{ matrix.environment }}
          dashboard-repo: ${{ inputs.dashboard-repo }}
          gh_token: ${{ steps.app-token-refreshed.outputs.token }}

      - name: Deque the lock for ${{ matrix.environment }}
        if: always() && steps.download_artifacts.outcome == 'success'
        id: dequeue
        continue-on-error: true
        run: |
          sfp resource dequeue --repository ${{ github.repository }} --resource ${{ matrix.environment }} --ticketid ${{ steps.lock.outputs.ticketid }} || true


  publish:
    name: "publish"
    runs-on: ubuntu-latest
    container: ghcr.io/flxbl-azlam/sfops-gh-actions-lite:latest
    env:
      GITHUB_TOKEN: ${{ secrets.NPM_TOKEN }}
      SFOPSBOT_APP_PRIVATE_KEY: ${{ secrets.SFOPSBOT_APP_PRIVATE_KEY}}
      SFOPSBOT_APP_ID: ${{ inputs.sfopsbot-app-id }}
      SFP_SERVER_URL: ${{ inputs.sfp-server-url }}
      SFP_SERVER_TOKEN: ${{ secrets.SFP_SERVER_TOKEN }}
    needs:
      - build
      - deploy-to-dev-orgs
      - deploy-to-test-orgs
      - deploy-to-snapshot-orgs
    if: |
      always() && (needs.build.result == 'success' ) && ( needs.deploy-to-test-orgs.result == 'success' || needs.deploy-to-test-orgs.result == 'skipped')  && ( needs.deploy-to-dev-orgs.result == 'success' || needs.deploy-to-dev-orgs.result == 'skipped') 
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.NPM_TOKEN }}

      - uses: actions/download-artifact@v4
        id: download_artifacts
        continue-on-error: true
        with:
          name: build-artifacts-${{inputs.domain}}
          path: artifacts


      - uses: actions/create-github-app-token@v1
        id: app-token
        name: "Get installation token for sfopsbot"
        with:
         app-id: ${{ inputs.sfopsbot-app-id }}
         private-key: ${{ secrets.SFOPSBOT_APP_PRIVATE_KEY }}
         owner: ${{ github.repository_owner }}
         

      - name: Serialize Publish
        uses: flxbl-azlam/sfops-gh-actions/turnstyle@main
        env:
          GITHUB_TOKEN: ${{ steps.app-token.outputs.token }}

      # Authenticate to npm
      - uses: actions/setup-node@v4
        if: ${{ steps.download_artifacts.outcome == 'success'}}
        with:
          registry-url: "https://npm.pkg.github.com"


      - name: "Fetch all ReleaseNames"
        id: getAllReleaseNames
        if: ${{ steps.download_artifacts.outcome == 'success'}}
        run: |
           sfp releaseconfig probe -c ${{ inputs.pathToReleaseConfigs}}  --repository ${{ github.repository }}

           

      - name: Compute Release Name
        if: ${{ steps.download_artifacts.outcome == 'success'}}
        run: |
          BRANCH_NAME=${{ github.ref_name }}
          if [[ $BRANCH_NAME == release* ]]; then
            RELEASE_NAME="hotfix-${{ inputs.releasename }}-$(date +'%d-%m')-${{ github.run_id }}"
          else
            RELEASE_NAME="${{ inputs.releasename }}-$(date +'%d-%m')-${{ github.run_id }}"
          fi
          echo "RELEASE_NAME=${RELEASE_NAME}" >> $GITHUB_ENV
          echo "allDomains={{steps.getAllReleaseNames.outputs.releaseNames}}" >> $GITHUB_ENV

      - name: Publish
        if: ${{ steps.download_artifacts.outcome == 'success'}}
        continue-on-error: true
        run: |
          sfp publish -d artifacts --npm --scope @${{ github.repository_owner }}  --gittag --pushgittag
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
          GH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Generate release defn
        if: ${{ !cancelled() && steps.download_artifacts.outcome == 'success' }}
        run: |
          sfp releasedefinition:generate -b releasedefns  -c  HEAD  -d ${{inputs.branchname}}/${{inputs.domain}} -f  ${{inputs.releaseconfig}} -n ${{env.RELEASE_NAME}}
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN}}
          GH_TOKEN: ${{ secrets.NPM_TOKEN }}


      - name: Generate changelog
        if: ${{ !cancelled() && steps.download_artifacts.outcome == 'success' }}
        run: |
          rm -rf artifacts
          git config --global --add safe.directory '*'
          git fetch --all
          # do a fetch again for accuracy
          git show origin/releasedefns:${{inputs.branchname}}/${{ inputs.domain }}/${{env.RELEASE_NAME}}.yml > releasedefn.yml
          sfp artifacts fetch -p releasedefn.yml -d artifacts --npm --scope ${{ github.repository_owner }}
          sfp changelog generate -b releasedefns  -d artifacts -w "${{inputs.workitem-filter}}"  --workitemurl "${{inputs.workitem-url}}" -n ${{env.RELEASE_NAME}} --directory ${{inputs.branchname}}/${{inputs.domain}}
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN}}
          GH_TOKEN: ${{ secrets.NPM_TOKEN }}


      - name: "Report changelog"
        uses: flxbl-azlam/sfops-gh-actions/changelogReporter@main
        if: ${{ steps.download_artifacts.outcome == 'success'}}
        with:
          source-branch: releasedefns
          pathToReleaseConfigs: ${{ inputs.pathToReleaseConfigs }}
          dashboard-repo: ${{ inputs.dashboard-repo }}
          branch: ${{ github.ref_name }}
          domain: ${{inputs.domain}}
          gh_token: ${{ steps.app-token.outputs.token }}
          source-repo-url: https://github.com/${{github.repository}}
          workitem-url: ${{inputs.workitem-url}}

      - name: "Cherry pick the commit and create PR"
        uses: flxbl-azlam/sfops-gh-actions/cherrypickAndCreatePR@main
        continue-on-error: true
        if: contains(github.ref,'release-') || github.ref == 'refs/heads/release/**'
        with:
          git-user-email: sfopsbot@flxbl.io
          git-user-name: build-bot
          gh_token: ${{ steps.app-token.outputs.token }}
          target-branch: "main"

      - uses: flxbl-azlam/sfops-gh-actions/add-pr-comment@main
        name: Report Comment on originating PR
        if: ${{ steps.download_artifacts.outcome == 'success'}}
        with:
          allow-repeats: false
          message-id: ${{inputs.domain}}
          refresh-message-position: true
          repo-token: ${{ steps.app-token.outputs.token }}
          message: |
            This work item  is now published in the following release defn  ${{env.RELEASE_NAME}} .
            The link is available at https://${{ github.repository_owner}}.github.io/${{inputs.dashboard-repo}}/#releasedefns

      - name: Create Message Body as File
        id: message_template
        if: always()
        run: |
          if [ -f .sfpowerscripts/outputs/deployment-error.md.md ]; then
           cat .sfpowerscripts/outputs/deployment-error.md.md >> message.md
          fi

      - uses: flxbl-azlam/sfops-gh-actions/add-pr-comment@main
        name: Print Any Deployment errors
        continue-on-error: true
        with:
          allow-repeats: false
          repo-token: ${{ steps.app-token.outputs.token }}
          message-id: ${{ inputs.releasename }}
          refresh-message-position: true
          message-path: |
            message.md

      - name: Report env infos
        uses: flxbl-azlam/sfops-gh-actions/reportEnvInfos@main
        with:
          gh_token: ${{ steps.app-token.outputs.token }}
          dashboard-repo: ${{ inputs.dashboard-repo }}


  comment_issue_on_error:
    runs-on: ubuntu-latest
    needs: publish
    if: always() && ( needs.publish.result == 'failure' || needs.publish.result == 'cancelled' || needs.publish.result == 'skipped')
    steps:

      - uses: actions/create-github-app-token@v1
        id: app-token
        name: "Get installation token for sfopsbot"
        with:
         app-id: ${{ inputs.sfopsbot-app-id }}
         private-key: ${{ secrets.SFOPSBOT_APP_PRIVATE_KEY }}
         owner: ${{ github.repository_owner }}

      - uses: flxbl-azlam/sfops-gh-actions/add-pr-comment@main
        with:
          allow-repeats: false
          message-id: ${{inputs.domain}}
          refresh-message-position: trueb
          repo-token: ${{ steps.app-token.outputs.token }}
          message: |
            Apologies, it seems we ran into an issue, This would need your manual attention please check the job run
            at the link https://github.com/${{github.repository}}/actions/runs/${{github.run_id}}