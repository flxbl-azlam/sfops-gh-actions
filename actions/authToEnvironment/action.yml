name: "Authenticate to an environment or a sandbox created by DevHub User"
description: "Authenticate to an environment or a sandbox created by DevHub User"

inputs:
  DEVHUB_SFDX_AUTH_URL:
    description: "Auth URL to DEVHUB"
    required: true
  ENV_SFDX_AUTH_URL:
    description: "Auth URL to Environment"
    required: false
  SB_SFDX_AUTH_URL:
    description: "Auth URL to Sandbox" 
    required: false
  environment:
    description: "Environment to authenticate to"
    required: false
  environment-profile:
    description: "Environment profile to use"
    required: false
  org-name:
    description: "Name of the sandbox in case SB_SFDX_AUTH_URL is not provided"
    required: false
outputs:
  alias:
    description: "Name of the sandbox"
    value: ${{ steps.handle-auth.outputs.alias }}
  devhub_username:
    description: "Devhub username"
    value: ${{ steps.auth-devhub.outputs.devhub_username }}
  org_id:
    description: "Org ID of the authenticated org"
    value: ${{ steps.org-display.outputs.orgId }}
  api_version:
    description: "API version of the authenticated org"
    value: ${{ steps.org-display.outputs.apiVersion }}
  instance_url:
    description: "Instance URL of the authenticated org"
    value: ${{ steps.org-display.outputs.instanceUrl }}
  login_url:
    description: "Login URL of the authenticated org"
    value: ${{ steps.org-display.outputs.loginUrl }}
  access_token:
    description: "Access token of the authenticated org"
    value: ${{ steps.org-display.outputs.accessToken }}
  username:
    description: "Username of the authenticated org"
    value: ${{ steps.org-display.outputs.username }}

runs:
  using: "composite"

  steps:
    - name: Authenticate to Production
      shell: bash  
      id: auth-devhub
      run: |  
        #No matter what authenticate devhub
        echo "${{ inputs.DEVHUB_SFDX_AUTH_URL }}" > ./authfile
        sfp org login -w -f ./authfile -a prod
  

    - name: Authenticate to ${{ inputs.environment }}
      id: handle-auth
      shell: bash
      run: |
        # Handle Auth to org
        
        handle_prod_or_production() {
          if [[ "$1" == "prod" || "$1" == "production" ]]; then
            echo "alias=prod" >> "$GITHUB_OUTPUT"
          elif [ âˆ’z "$1" ]; then 
            echo "alias=prod" >> "$GITHUB_OUTPUT"
          else
            echo "alias=$1" >> "$GITHUB_OUTPUT"  
          fi
        }

        handle_sandbox_url() {
          echo "$1" > ./authfile 
          alias_lower=$(echo "$2" | tr '[:upper:]' '[:lower:]')
          sfp org login -w -f ./authfile -a "$alias_lower"
          echo "alias=$alias_lower" >> "$GITHUB_OUTPUT"
        }

        handle_no_auth_url() {
          alias_lower=$(echo "$2" | tr '[:upper:]' '[:lower:]')
          echo "No Auth URL found for $1, Attempting to login assuming the devhub user created environment"
          sfp org login sandbox -w -n "$1" -v prod -a "$alias_lower"
          echo "alias=$alias_lower" >> "$GITHUB_OUTPUT"  
        }

        # Enable case-insensitive matching  
        shopt -s nocasematch

        # Main logic
        if [[ "${{ inputs.environment }}" =~  ^prod$  || "${{ inputs.environment }}" =~ ^production$ ]]; then
          handle_prod_or_production "${{ inputs.environment-profile }}"
        elif [[ "${{ inputs.ENV_SFDX_AUTH_URL }}" != '' ]]; then
          handle_sandbox_url "${{ inputs.ENV_SFDX_AUTH_URL }}" "${{ inputs.environment-profile }}"
        elif [[ "${{ inputs.SB_SFDX_AUTH_URL }}" != '' ]]; then 
          handle_sandbox_url "${{ inputs.SB_SFDX_AUTH_URL }}" "${{ inputs.environment-profile }}"
        elif [[ "${{ inputs.org-name }}" != '' ]]; then
          handle_no_auth_url "${{ inputs.org-name }}" "${{ inputs.environment-profile }}"
        else
           handle_no_auth_url "${{ inputs.environment }}" "${{ inputs.environment-profile }}"  
        fi

        # Disable case-insensitive matching
        shopt -u nocasematch


    - name: Export org details
      id: org-display
      shell: bash
      run: |        
        # Read from the file and extract the required information
        echo "alias=$(jq -r '.alias' org-info.json)" >> "$GITHUB_OUTPUT"
        echo "orgId=$(jq -r '.orgId' org-info.json)" >> "$GITHUB_OUTPUT"
        echo "instanceUrl=$(jq -r '.instanceUrl' org-info.json)" >> "$GITHUB_OUTPUT" 
        echo "username=$(jq -r '.username' org-info.json)" >> "$GITHUB_OUTPUT"
        echo "loginUrl=$(jq -r '.loginUrl' org-info.json)" >> "$GITHUB_OUTPUT"
        echo "accessToken=$(jq -r '.accessToken' org-info.json)" >> "$GITHUB_OUTPUT"
        
        # Clean up: Delete the temporary file
        rm org-info.json